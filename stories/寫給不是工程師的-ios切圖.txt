2017–06–13 更新：根據 https://developer.apple.com/videos/play/wwdc2017/201/ 內容所述，在 iOS 11 中將完整支援 PDF 向量格式的內容，換句話說…放進去的 PDF 將完整的保留向量格式，設計師再也不需要再考慮尺寸啦（撒花，當然還是要盡可能地降低圖片尺寸大小啦 xD）本篇文章中提及的內容包含：Hello，我是Samuel，目前是一個 iOS 工程師與半個介面設計師，歡迎各路夥伴交個朋友一起學習🌟。由於前陣子剛好跟幾位設計師朋友聊到 iOS 切圖上面的幾個問題，意外的發現每位設計師在與工程師合作的過程中都會衍生出一套特別的合作模式（笑）；一直以來都想跟各位夥伴聊聊這種介於工程與設計之間模糊模糊沒有絕對對錯的題目，就好比在程式碼中，相同的功能並沒有絕對正確的寫法一樣（通常的處理方式是從某個維度找出一個當下的最佳解），在文章的內容中也會跟各位夥伴分享一些小弟我在誤打誤撞東拼西湊的過程中，逐漸養成的一些工作習慣與實作細節，希望多少能夠在工程與設計的合作上面提供各位一些參考。在文章開始之前，我必須要特別謝謝「醒大」，一位在我踏入職場至今都持續不吝給予指導的大神級前輩；從程式開發、介面設計到程式架構上面都從前輩那邊學到相當多的經驗。因為工作的關係，一路走來在開發跟介面設計上面大部分走的都是單打獨鬥的路線；至於共同合作的部分，由於合作的工程夥伴一個比一個厲害（Shou & Aydan），基本上一個眼神配上一張什麼都不用標注的介面圖稿（喂，我亂講的），夥伴們就能夠把畫面做到接近完美，就是那種不偷偷把你的設計間距除以二，不偷偷把字體調大10pt 或是不偷偷加動畫加 icon 的那種完美（各位偉大的設計師，介面被亂改的痛，我懂！！！因為我聽見你們的聲音啦！！）。為了提升整體開發的效率，在開發與設計的過程中，我們都會盡可能地透過事前的規劃來降低溝通與設計成本，規劃的議題包含如何在 iPad, iPhone 的尺寸上面快速取得平衡（透過一些簡單的數學邏輯），如何標注跟設計能夠降低工程師/設計師彼此的負擔（找出讓我最省工的模式）等等；如何切圖的教學其實在網路上隨便一撈就可以撈到滿坑滿谷，但在這篇文章中要跟各位伙伴分享的是一些設計師可能從來不會注意到的，或是那些工程師從來就沒有告訴過你的切圖技巧與背後的原因。一般來說，大部分的設計師在輸出 icon 給工程師時，通常會在設計好 icon 在頁面上的尺寸之後，針對正常、點擊與不可點擊三種狀態分別輸出 PNG 檔給工程師使用；這樣的合作模式其實分工相當明確，同時也不會產生其他額外的「大問題」，那你寫這篇幹嘛？當然是有原因的啊；有一些麻煩的事情像是當設計師想要微調 icon 的顏色，微調 icon 的尺寸，製作特定的動畫效果等等，往往需要重新輸出所有的圖檔，再請工程師重新置入所有更新的圖檔，一旦今天心血來潮決定來個大改版，把所有紅色的 icon 全部換成綠色的 icon 時…通常悲劇就很有可能發生。（工程師抵死不從，或是說好要幫你改但是不小心就失憶了😳）以我個人的習慣，在實際開始開發/切圖前我會評估 icon 設計的類型，以下圖兩個情境為例：兩者的差異在於 →當按鈕或者 icon 的狀態改變時，情境1改變的是 icon 上相同上色區域的色彩（以下圖為例，就是 Location Icon 的線條），透明區域維持不變。情境2 改變的則是 icon 中不同區塊的色彩（原先的透明區域被白色填滿），看不出來沒有關係，打開 iPhone 的通訊錄，底下的 Tab Bar 就是情境2一個最好的案例，以聯絡資訊的 icon 為例，你會發現這顆 icon 在點擊後原先透明的區塊轉成填滿的狀態，不透明的區塊轉成透明的狀態：當你的 icon 使用情境以情境2為主時，恭喜你，保留你原本三種狀態分開出圖的習慣吧！那樣肯定會是與工程師合作最快速的一種模式（還是要往下看啊，還有其他的重點需要注意）；但是當你的 icon 使用情境以情境1為主時，我們可以一起來嘗試一些新的設計方法：看完這樣的做法相信大家心裡多少都會有些疑惑，就讓我們來聊聊每一項選擇的原因吧！簡單來說就是針對不同狀態設定不同的圖片，但是相信跟你們合作的工程師應該也知道我們可以透過改變 Button 身上 ImageView 的 TintColor 來達到渲染 icon 顏色的效果（記得設定的 Image 要使用 alwaysTemplate 的 rendering mode 才有辦法上色喔），這也是為什麼在這邊使用#808080的灰階，灰階的色彩在顏色渲染上基本上不會有出錯的情形；工程師只要寫一個簡單的 Button Extension，不管是搭配 Setter 或是客製化的 Button Class，運用類似底下程式碼的邏輯，都可以輕易達到根據不同按鈕狀態渲染不同顏色的效果：這種處理方式最大的好處在於…如果設計師想要改變 icon 各種狀態的顏色時，原本需要重新輸出 n張新顏色的 icon 再請工程師幫你更換到 App 的 Asset 裡面，在過程中可能會發現像是加班加到太累不小心漏掉幾張圖，或是放到螢幕上覺得有點色差想要在微調時真的會很崩潰；現在工程師只需要幫你改一行 Code，世界從此太平，顏色就全部換完啦！補充：除了上述日常的狀況以外，隨著前端技術的發展（App，網頁）與設計師們想像力的噴發，設計師與工程師彼此透過靈來溝通的頻率也日益增加（一種互相通靈的概念）；在使用者體驗與互動效果被慢慢重視的狀況下（在不做點動畫好像就是輸別人那麼一點），客製化的按鈕肯定就會是第一個下手的目標；以下圖 Tickle 裡面的按鈕為例，唯一使用的圖檔就只有一張 30x30，#808080灰階的 PDF icon 檔案。4. 使用 PDF 檔案：好 PDF 不用嗎？回想當時 iOS 在 2014 年的某一個版本開始支援向量圖檔的使用，由於當時我還不會寫 iOS， 所以我也不知道是哪一個版本（逃）。重點是 — 對於設計師而言，使用 PDF 格式出圖就只需要處理一個尺寸，是不是很棒！！但是別急，在使用PDF前需要提醒各位夥伴幾項重點，才能夠避免掉一些來回調整的額外成本；第一點：輸出正確的 PDF icon 尺寸系統並不會因為它是向量的圖檔就不會糊掉；iOS 是在程式編譯時，把 PDF 圖檔根據螢幕的解析度處理成對應的 PNG 圖檔，舉例來說，當你使用潮潮的玫瑰金 iPhone SE 進行測試時，一顆 30x30 的 PDF icon，在程式運作時，iOS 系統會自動把 30x30 的 PDF 圖檔做成 @2x 60x60 的 PNG 圖檔，程式裡面使用的就是這顆由系統幫你做出來 60x60 的 PNG icon；所以注意囉！程式運作時並不是讀取原先輸出「向量格式」的圖檔，如果你在程式裡面將 icon 的尺寸設定超出 icon 自身的尺寸範圍（60x60），它馬上就會糊給你看🤣，並不能因為你給的是一顆向量格式的 icon，就可以毫無限制的在畫面上調整 icon 的尺寸喔！第二點：妥善的處理 PDF 圖檔在正常的狀況底下， PDF 格式的圖檔通常尺寸都會比較大，因此在處理時需要格外注意；遙想當時年輕不懂事，剛進公司沒多久，在製作下面這張Template圖的時候很開心的複製貼上亂疊各種圖層，然後背後留下來雜七雜八的圖層也偷懶不整理，導致最後輸出的 PDF 檔案一張就有20MB，造成工程前輩的困擾（笑）。第三點：使用 PDF 跟 PNG 格式的圖檔在畫質的呈現上面有沒有什麼差異呢？對於幾何形狀為主的 icon 而言幾乎沒有任何的差異，但是對於較複雜的圖像而言 PNG 的表現實際上是優於 PDF 的。各位可以參考這篇文章的說明：Why I don’t use PDFs for iOS assets，嗯…這個標題好像很驚悚，但是我在讀完之後基本上都還是使用 PDF 進行切圖啦哈哈哈哈。（通常是檔案尺寸降不下來或是特別追求高畫質的圖檔我才會回去使用 PNG）老實說對於肉眼而言，兩者產生的差異幾乎是看不出來的。第四點：如果我堅持要使用 PNG 有什麼要注意的嗎？這邊補充一個優化的小細節。再輸出類似 icon 或者 Logo 之類的 PNG 圖檔時，建議可以使用 8-bit 的 PNG 圖片（灰階圖片就是一個最佳案例）。除此之外再使用 24-bit PNG的狀況下，也可以透過類似TinyPNG這樣的服務來壓縮你的 PNG 圖檔。兩種方式都可以有效的降低你的圖片大小喔；有餘力的夥伴建議可以花點時間處理一下，畢竟，一但超過 100 MB的應用 App Store 是不會讓你透過 4G 網路下載的（Tickle 早在一年前就已經遠超過 100 MB，小弟我是很早就放棄啦 xDDD）。可能也是個人習慣的關係（各種懶惰），在開發的過程中我都會盡可能的嘗試「最大彈性」的作法，換句話說「只要能在程式裡面上色，上陰影或者調整尺寸這種，大部分的狀況我都會選擇在程式裡面進行修改」，畢竟保留彈性對於未來介面的優化、調整甚至使用者體驗的改善上其實都是相當植得投資的。接下來我們再來聊聊另外幾點：關於按鈕的部分，有不少的內容其實已經在 icon 那邊已經跟各位夥伴聊過囉，在這邊要另外跟各位夥伴補充幾點：這個部分可以講的內容其實非常，非常，非常的多（笑），美一點背後踩過的都是滿滿的坑啊（汗），如果設計師在設計時能夠注意到這些細節，偶爾站在工程師的立場進行設計，對於工程師來講你就彷彿是個天使，當然，如果你能夠站出來否決你的PM或是老闆，對於工程師而言你就已經成為有如神一般的存在了（握），好啦，有機會再跟大家分享更多這類型的狀況。（打個廣告，在 Hahow 開設的iOS入門，從介面設計到開發的課程中也有介紹不少這類型相關的內容喔）除了前面針對 icon 與按鈕的部分之外，今天我們就再來聊聊一個彈出式視窗可能會遇到的狀況吧！以下圖為例，下圖是我在 Hahow 課程中所繪製的畫面：看到這樣的畫面，相信各位都可以很快速的把畫面拆分成四個元件，包含廣告圖、標題、敘述以及按鈕。在畫完這樣的介面後，設計師可能會很開心的把 Artboard 輸出到 Zeplin 就以為故事到此為止，但...一個善解人意的設計師會做的事情，會作出類似下列的說明：看到滿滿的標注內容，簡單來說這邊的重點就是——不管今天設計的是Web, iOS還是Android，盡可能提前告知工程師「畫面中可能會產生變動的元件」，包含元件的數量，元件的高度等等；以及「內容發生變動時，畫面應該要如何去處理這樣的狀況」，這樣的習慣除了有效地幫助工程師規劃你的介面以外，也能夠幫助你在設計的過程中學著提前考慮畫面的狀態變化，以及保留介面上面的各種彈性等等。一旦內容有變動，在標注不清楚或者讓工程師自由發揮（偷懶）的狀況下，很有可能會導致類似下圖的情形（有點誇張啦xD）：有經驗或是重視美感的工程師可能還好，一個在設計程式架構時通常就會考慮這樣的狀況保留一定的彈性，另外一個會礙於美感的關係毫無怨言地幫你調整，但是...如果你遇到的是這兩種工程師以外的哪一種，恭喜你中獎🎉🎉，下次好好注意一下吧（笑）。哇，是不是斷的有點突然！！！嗯...莫名其妙又寫了一堆有的沒的不知道對各位有沒有幫助的內容，其實還有很多想跟各位分享、想抱怨的內容但是礙於篇幅（惰性）...就讓我保留到下一篇文章裡面吧！其實啊，程式可以做出非常多不同的視覺效果，但是犧牲的就是工程師的時間，你的陰德值以及產品的效能，如果在程式中繪製的過程過於複雜很有可能導致效能上面的下降（畫面會卡卡之類的），找出一個彼此合作的平衡點就是這篇文章的首要任務啊（笑）。From a quick cheer to a standing ovation, clap to show how much you enjoyed this story.Hello, welcome to my board : ) I am a Software Developer, UI Designer and Content Creator in Taiwan. Know more about me: www.samuel-kao.comAAPD專注於分享數位產品設計的相關資訊，並且致力在平台上創造更多的交流與互動，我們關注UI設計、UX設計、設計師的個人成長、設計趨勢與產業動態等，希望透過這些知識的傳遞，能夠降低每位設計師成長的過程中所遇到的阻礙。歡迎來信投稿：aapdgo@gmail.com
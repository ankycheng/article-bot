設計跨平台App，20件該注意的介面控件與操作差異目前手機 App 開發為了讓更多使用者接觸，往往同時會在 Android 與 iOS 平台推出，但許多 App 的設計，往往沒注意到兩個平台的差異，常發現 Android App 上出現 iOS 的控件，明明Android有自己的樣式可以使用；或是在 iOS App 上使用 Android 的操控行為，導致使用者的不適應。為了讓新手設計師或工程師瞭解兩個平台的一些差異，以下針對常用元件與操作行為，甚至它們對於同一類似元件有不同名稱，做對照介紹：我們先來談談導航設計，因為它是每個 App 設計一開始要碰觸的基本架構問題。側邊導航選單 (Navigation Drawer) 在2013年是 Android 最具代表性的設計，將資訊架構上，屬於最頂端的項目，收在裡面，呈現簡潔乾淨的風貌，但隨之，許多研究漸漸表明側邊欄的使用性問題 (可參考8種手機導覽設計解析)，Google 自己本身的 App 也漸漸把一些重要的功能分類，從側邊欄移到標籤列 (Tabs)，Youtube 便是一例。2016年，Material Design Guidelines 出現底部導航列 (Bottom Navigation)，可以看得出來越來越與 iOS 靠近。值得注意的是，Android 標籤列與底部導航列仍有使用差異：1) Tabs 在資訊架構上，可以放在任何一個層級。但 Bottom Navigation 只能使用在最頂端的層級2) Tabs 支援 swipe 手勢，可以滑動切換頁面。然而 Bottom Navigation 僅能點擊切換。3) Tabs 可放的項目數量更有彈性，除了 Fixed Tabs 可放2–5個項目外，它還有 Scrollable Tabs 可以放置為數不少的項目。然而 Bottom Navigation 僅能放3–5個項目，禁止兩個或超過五個。另外，在架構比較複雜的 App 上，會出現 Navigation Drawer、Bottom Navigation 與 Tab Bar。(其實我不太建議 App 同時出現 Navigation Drawer 和 Bottom Navigation，不確定彼此的隸屬關係，究竟 Navigation Drawer 的階層比 Bottom Navigation 高或低？或是互不隸屬的平行關係？這種架構階層不明，使用上令人疑惑。Google Plus 是設計不良的一個例子)。但依目前 Google 出的 App 來看，Navigation Drawer 和 Bottom Navigation 是互不隸屬的平行關係，例如 Google Photos 和 Google Plus，在主頁面內容下，打開 Navigation Drawer 時，會發現該主頁並沒有 highlight 附屬在哪個類別底下。就目前觀察到的邏輯，Android 會把帳號、設定以及其他較少使用的次要功能，放在 Drawer 內，把 App 主要功能類別，放在 Bottom Navigation。iOS 的預設導航方式，一直以來始終如一，採用底部導航的 Tab Bars，iOS Tab Bars 的操作行為如同 Android Navigation，基本上項目以三至五個為限。值得注意的是，iOS 進到下方階層的頁面時，Tab Bars 常常依然存在，點擊該項目時，會直接帶到第一層。(Tab Bars 會在 Modal View 或是看更細節的內容頁面時才會消失)。然而在 Android，無論是 Tab bars 或是 Bottom Navigation，在進到下一個頁面時，便會消失。Android 頁面頂端的 App Bars，又稱作 Action Bars 或是 Toolbars，主要用來放置該頁面的名稱，並置左放置，而右側則放置功能按鈕，因空間有限最多約三個，若操作功能超過三個，則最右側會使用 overflow icon，點擊後出現選單，將剩下較次要的操作放入裡面。iOS 上方區域稱作導航列 (Navigation Bars)，頁面名稱於導航列置中，習慣上左右兩側可個放一個放其他操控功能鍵，iPhone 6 出現之後，螢幕有更多空間，iOS 開始左右側可放兩個。Android Action Bars 的返回鍵有固定的 icon 樣式，而 iOS 亦然，不過 iOS 返回鍵旁會再加上返回的文字，或是添加上一頁面的名稱，讓使用者更明確知道返回至何處。除了在Action Bars/ Navigation Bars 置放功能鍵以外，Android 和 iOS 都可以將一些功能鍵放在置於頁面底部的 Toolbar 上。雖然 Android 在Guidelines上並未提及底部 Toolbars (Guidelines 內主要把 Toolbars 當成 App Bars 一起談)，但設計實務上 Google Keep 和 Google Photos 內，也可以發現一些功能鍵放在 Toolbar 上，並置於頁面底部。iOS 另外在頁面下方可有 Toolbars 是還蠻常見的 UI 形式，可放置功能鍵，icon 或純文字按鈕的型式皆可，亦可置放狀態說明。在架構上，對於第二階層以下的頁面，Android 可使用 Tabs，而 iOS 則是使用 Segmented Controls。Android 和 iOS 皆可以將 Tab/Segmented Control 置於 Action Bar/Navigation Bar 位置。Android Tabs 可以以放文字、圖示或圖示和文字的組合(較少見)，iOS Segmented Controls 則可放文字或圖示。同一組的 Android Tab 和 iOS Segmented Control 的設計應有一致性，文字和圖示不應混合使用(例如第一個項目使用圖示，第二個項目使用文字)。文字上，Android 對於可以點擊的文字一律使用全大寫文字，因此 Tabs 上的文字是全大寫樣式。iOS 則使用字首大寫。Android Tabs 項目數量，若是使用 Fixed Tabs ，則為 2–5 個，數量超過5個或是字串較長時，可採用 Scrollable Tabs。但 iOS Segmented Controls 因本身有空間侷限性，以及點擊區域操作考量，建議 2–5 個。基本上 Android 和 iOS 的按鈕，僅在外觀與字串大小寫有所差異。Android 按鈕分為扁平 (Flat) 和凸起 (Raised) 按鈕，兩種類型要看狀況使用，在卡片式 UI 就不適合使用凸起的按鈕，畢竟卡片已經有陰影，層次會變得太複雜，在 Dailog 和 Footer 上的按鈕也會採用扁平化的按鈕。Android 另外還有 Floating action button，會在下一章再做介紹。雖然 Android Material Design Guideline 僅定義 Flat 和 Raised Buttons 樣式，但其實在 Google Play 中，仍可以看到 Ghost Button (僅有外框線的按鈕) 以及像 Raised Buttons 卻沒有陰影的按鈕，這兩種按鈕就有點像是 iOS Normal Button 以及 Pressed Button 的樣式。Android 按鈕一律採大寫字母，iOS 則是多採字首大寫，然而 iOS 內 Ghost Button 的樣式，有時採用全大寫，如 App Store 內的 OPEN 或是 UPDATE，但 iOS 1o Map 內的一些導航或是餐廳介紹的按鈕如 Book a Table 和 Directions，則卻使用字首大寫，iOS 在按鈕部分的邏輯顯得有些不一致。但細看 iOS 按鈕邏輯，頁面中只有出現一兩個的主按鈕，尺寸會較大，使用字首大寫；頁面中有一整排的操作按鈕，尺寸會略小些，且採用全大寫。浮動式按鈕 (Floating Action Buttons) 在 Android 5.0 和 Material Design 一同首次登場，主要解決原先按鈕都在 Action Bar 上，單手操作時手指難以觸及的問題，它的位置多半置於右下方角落，另一種則是當畫面有排版上的上下分割時，會置於畫面分割的中間。浮動式按鈕適合用於需要頻繁使用的功能上，頁面中主要的功能，例如：在 Mail 中可能就是寫信的按鈕就適合用浮動式按鈕；在社群上發佈新訊息的按鈕同樣也可以浮動式按鈕。而 iOS 其實沒有相對應的設計，放在 Tab Bars 內正中間的的 Call to Action 按鈕或許是比較相近的比擬。早期 CTA 按鈕為了與其他 Tab 做區隔，往往也會用上其他不同的顏色或設計，而隨著使用者越來越熟悉這樣的形式，有些則開始也不再有明顯區別。例如：Facebook 過去 Tab Bars 中間的放的是傳訊息的按鈕，Instagram 中間是發佈照片的功能鍵，Medium 則是編寫新文章。Android 底部表單(Bottom Sheets)也是在2015年後才出現，而 iOS 早已有類似的設計。Android 會有這樣的設計，同樣也應是在解決單手操作舒適區的問題。Android Bottom Sheets 主要有兩種形式，一種是 Modal bottom sheets。常見內容多半為兩種，一種則是可以操作的功能選單，功能選單左側可以放置圖示，有點類似於 iOS 的 Action Sheets；一種是按了 Share icon 後，會滑出可以分享的 App 清單，表現形式可能是列表式 (List) 或是網格狀 (Grid)，可對應於 iOS 按 Export icon 出現的 Activity Views。Android Botton Sheets 另一種形式則是 Persistent Bottom Sheets。Persistent Botton Sheets 主要用在當畫面中主要內容和底部表單的內容都一樣重要，有呼應關係的時候，例如在地圖的 App 中，上方顯示地圖，底部表單則顯示該餐廳的詳細資料，或是音樂 App 中，上方是專輯封面，底部則是正在播放的音樂控制區。Android 的 Persistent Botton Sheets 在 iOS Human Interface Guidelines 中並無發現特別對應的設計，但是在原生內建的地圖以及音樂 App 中，可以看到類似設計。Android 對話框 (Dialogs) 主要有三個功能：警示，中斷使用者的操作，告知使用者目前的狀況；提供選單，可以讓使用者選擇或控制一些簡單的設定；確認，在使用者做一些可能無法反悔的操作時，做進一步的確認動作，作為防呆之用。Android Dialog 由標題、內容和按鈕構成，標題有時可以省略，內容可以不僅僅只有文字，還可以有一些選項或是文字框等。iOS Alert 的組成也大同小異，只是內文可省略，保留是標題，內容亦可以是文字框。Android Dialog 分為三種形式：Simple Dialogs，沒有確認取消按鈕，內容直接是選項可以選取，點選之後，就做選擇，點擊 Dialog 外面或按返回鍵，就可以將 Dialog 關閉。Confirmation Dialogs，是最常見的形式，通常會有按鈕讓使用者點擊，確認動作。Full-Screen Dialogs，僅在手機上出現，在平板上就會變成非滿版的 Dialogs 樣式，可以視作 iOS 的 Modal View，後面會再做介紹。Android 標題和內文習慣置左對齊，而 iOS 則是置中對齊；另外 Android 標題會採用句首大寫，而 iOS 採用字首大寫；內文 Android 和 iOS 都採用句首大寫。Dialogs 和 Alert 的標題都應簡短清楚，甚至可以能不看內文就可以進行操作。也盡量要避免「你確定要刪除檔案？」的問句，改以更直接的方式，如「刪除檔案？」在按鈕部分，Android 和 iOS 可以有一個按鈕或是兩個按鈕存在，iOS guideline 則是建議一般狀況下，避免有三個以上的按鈕出現在 Alert，若有三個按鈕以上，可使用 Action Sheets 作為替代，不過其實 iOS 在詢問是否升級系統時，就出現三個按鈕：Install Now、Later、Details。當有兩個按鈕時：取消鍵與主要動作鍵，Android 和 iOS 都習慣將取消鍵放在左邊，而使用者最可能點擊的主要功能鍵放右邊（原因請參考這篇文章）。當按鈕字串較長時，按鈕可以上下擺放，此時，主要功能鍵會放在取消鍵上方。按鈕上的文字，也應該要避免使用是 (Yes) 否 (No)，而是要將動作直接寫出，更為明確直接。iOS 在進行刪除等無法復原的操作按鈕上，會使用紅色，而 Android 則較少用別的顏色表示。Android 在按鈕上習慣使用全大寫，而 iOS 仍採用字首大寫。Android 按鈕字串會向右對齊，而 iOS 習慣在按鈕區塊內置中對齊。另外 Android 的 Dialogs 當內容較多時（通常是Dialog內放設定值），有 Scrollable 的樣式，可固定上方標題及底端按鈕區塊，滑動中間內容。但 iOS 則無該樣式，建議內文應簡短，避免 Alert 內做滑動。Android 有另一個形式的對話框，稱作 Full-Screen Dialogs，僅在手機上出現，而這種形式在平板上，則類似 iOS 的 Modal View，內容多半是放些設定的表單，iPad 上除了 Modal View 外，另外還有 Popover 可以使用。Modal View 的頁面轉場動畫，習慣進入的時候，頁面由下往上滑動，離開時則是往下滑動。Android 的訊息提示除了 Dialog 以外，另外有 Snackbars 和 Toasts 作為侵入性較低的提示訊息，往往顯示三秒左右，便會自動消失。在做完一個操作動作時，Snackbars 會出現，已提示使用者任務完成，作為回饋。另外 Snackbars 上可以再添加一個動作按鈕，讓使用者可以反悔，或是做其他動作。Toasts 則是顯示系統訊息為主。Snackbars 可以左右滑動移除，而Toasts則無法。Snackbars 和 Toasts 要避免在上面使用 icon。因為 iOS Guidelines 中沒有相對應的元件，有時候會將一些完成的訊息使用 Alerts 提示，但其實侵入性有點過高，會中斷使用者的體驗。iOS 唯一比較像 Toast 的是調整音量時候出現的方框，告知目前音量大小，調整完音量幾秒為操作時，會自動消失。而有些 App 則是會自行客製化 Alerts ，就像 Android Toasts 一樣，會自動消失。列表 (Lists) 大概是所有 App 設計內都會發現它的蹤影（至少設定內總會出現），也是最基本的 UI 元件。Android 直接稱做 Lists，但 iOS 上，會稱作 Tablets，由許多的 Cells (Rows) 組成。Android Lists常見的基本樣式有單行、雙行（一行標題、一行次要內文）、多行（一行標題、兩行以上次要內文），List 還可以加上 icon/thumbnail 以及控件（如：checkbox, radio button, switch button等），通常文字左側會放主要操作鍵，右側尾端則是放次要操作鍵，也就是說，如果你一個 list 內有 icon 又有控制鍵的話，往往 icon/thumbnail 會放在左側，而控件放在右側，但如果你只有一個控制鍵的話，就放在左側（不過過去 Android其實習慣把 checkbox 之類的控制鍵放在右側，不過他本來就一直移來移去沒停過，在更早之前也是放在左側）。iOS 和 Android 列表也是大同小異，但仍有一些地方需要注意：1) Android 在手機上， 當有主標題和次要的文字時，往往是用兩行的形式，次文可以是次標題或是設定的值。而在 iOS 上，除了有兩行的形式外（上面方主要標題，下面放解釋或例子的次標題），亦用單行的形式，左邊放主標題，右邊則是放值。不過 Android 兩行列表到平板上時，往往因為空間足夠寬敞，有些情境，也會改採左右置放。2) 對於點擊列表後，是否有下一頁，還是單純展示資訊，無法點擊這件事， iOS 比 Android 做得更好，iOS 只要有下一頁可以進入的話，往往列表上右側會出現箭號作為提示之用，如果沒有箭號，往往就僅是展示資訊。但是在 Anroid 上，無論是可以點擊或是無法點擊的資訊，呈現都一樣，易用性較差。3) iOS列表有兩種形式，Plain 和 Grouped，Plain Tables 整頁白色，即使只有前面兩三項有內容，後面空白的區域仍有隔線，而Grouped Tables會有灰色底，然後第一筆 Group Table 和 Navigation Bar 會隔一段距離。但 Android就統一一種形式。Android Subheaders 和 iOS Header 主要是用來區隔 Lists/Girds 的內容，作為分類之用。不過 iOS 列表分隔方式有兩種，一種常見於 Grouped Tables ，另一種則常出現於 Plain Tables，偏同類型資料的分類，如：不同日期的照片，不同字首的姓氏資料。Android Subheaders 使用句首大寫；iOS Grouped Table Headers 採用全大寫，而 Plain Table Header 則採用字首大寫。在 Scroll 時，Android Subheader 可以沒入 Action Bar 下，或是一直頂在Action Bar下方，等到第二個 Subheader 把它頂走才會消失，而這個行為就和 iOS Section Header一樣，Grouped Table Header 則無此行為。列表控件也是 App 必備的元件，但在單選和多選的操作上，常看到一些誤用的設計，以下針對在列表上常見的多選、單選、開關、換序控件、隱藏操作，做簡單的對比介紹。Android 多選時，會採用 checkbox，樣式為方框加勾勾，未選取時只有方框，選取時，會多個勾勾，和一般 desktop OS 或是網頁習慣相同。但是 iOS 上卻沒有 checkbox 的控制件，反而是使用圓圈加勾勾的方式，可能會讓部分人誤認為單選的 radio button。Android Checkbox可以放在項目左側或右側，而 iOS 習慣放在項目左側值得注意的是， Android 上有時候會將 Checkbox 拿來當功能的啟用鍵，iOS 則會是使用 Switch Button，並不使用多選圓框。Android 上也是有網頁和 desktop OS 的單選控件 radio button，樣式為一個圈，如果選取時，中間會多一個圓點。Radio button 的項目彼此間是互斥的，當選了其中一個項目，另一個項目就會被取消選擇。在 iOS 上則無 Radio Button，但是有功能一樣的 Checkmark，作為單選之用。Android 過去常將 Radio Button 置於列表選項右側，目前則是漸漸放在左側。而Android Checkmark，放在選項右側；而 iOS 的 Checkmark 主要放在右側，但當右側有其他物件時，就會移到左側去。雖然 Material Design Guidelines 沒有介紹另外一組2016年慢慢出現的控件，一個單純勾勾的單選樣式，和 iOS 形式一樣，但是在 Google Calendar 內，可以看到它的蹤影。Switch 代表著一個功能的啟用與否，操作設定立即生效，不像 Checkbox 和 Radio Button 比較習慣還需要有一個確認按鈕。雖然過去 Android 功能啟用即時沒有確認按鈕，仍習慣用 Checkbox，但目前新改版的 App 設定都開始使用Radio Button。而 iOS 則是一直使用 Radio Button 作為功能啟用按鈕。位置皆習慣置於列表右側。Android 上用於拖曳移動物件的 icon 使用四條橫桿，避免和開啟 Navigation Drawer的 humburger icon (三條橫桿)混淆。 Reorder icon 通常在編輯模式中出現。iOS的 Gripper icon 出現的比 Android 早，同樣也是在編輯模式中出現，只是 icon 就直接是三條橫桿，畢竟不像 Android 有使用 Drawer 當導覽的習慣。左右滑動 List ，下方會出現隱藏的操作，這是 iOS 常見的操作，過去上滑動常會出現刪除選項。現在除了刪除以外，還有許多不同的動作，在左滑或右滑可能隱藏不同的操作動作，例如左滑 mail list 會出現 Archive、Flag 和 More，右滑則是Read/ Unread 切換。在 Android 5.0 之後，才在 Guidelines 出現這樣的操作方式，值得注意的是，它不適合出現在有 Tabs 的UI 上，因為和 Tabs 支援左右滑動手勢操作衝突，這也是為什麼 Android 過去並沒有這種操作方式。另外，iOS 滑動一定距離停下後，會出現1–3個的選項，點選之後才會採取該動作，但若是滑動到底，可能會有一個預設行為。Android 多半只有一個動作，滑動之後就會直接採取該動作，並無特別兩段式操作。但 Leave-Behinds 在 Android 上是比較新的行為 (因為和擁有悠久歷史的 Tabs 操作行為牴觸)，有點向 iOS 致敬的意味，可以再多注意後來的發展和操作習慣。展開/收合控件主要可以幫助架構階層更為扁平，不用再進到下一頁才能看到資訊，可以直接展現在同一頁面，常出現於 FAQ list，點擊問題後，就展開答覆。Expand/Collapse 除了放在 lists 上，也可以和subheader做結合，收起一些自己不常使用的類別資訊，常見於聯絡人或是其他有分類標題的列表。亦可放在卡片式 UI 上展開/收合資訊。Expand/collapse 在 Material Design Guidelines 有明確列出的控制元件，但在 iOS Human Interface Guidelines 似乎沒有特別定義，也較少見。唯一類似的控制鍵，是在 iOS 8 App Store 內出現的，在 Explore 的 Categories 區塊，採用收合的方式操作，點擊某一類別之後，該類別會往上升變成標題，且不像 Android，在頁面上無法看到其他類別的東西，需點擊標題在更上方的區塊（上一階層的標題），才能返回，因此，並不像 Android 一樣，有將階層結構扁平化的效果。Grid 主要用於相同類型資料的展示，特別是圖像類。Android 的 Grid 除了圖片以外，它還可以加上 Header 或 Footer 給予一些資訊或是操作。而 iOS Collection View 單純僅是圖片。在排列 Grid 時，畫面最底端的 Grid 最好會被畫面截斷，留一些視覺線索，讓人知道下面還有內容。Grid Lists 和 Collection View 都可以點擊，而進入下一層，看更詳細的資訊。卡片式 UI 一直在設計中被運用，在 2015年 Google 推出 Material Design 時，更成為 Android 設計的代表。卡片式 UI 的好處在於跨平台螢幕尺寸的相容性（卡片容易移動以變更排版符合螢幕），以及可以承載多元的資訊類型（文字、圖片、圖表）。雖然 iOS Guidelines 並未針對卡片式 UI 做出定義，但在 iOS 原生的 App 中，仍可以看到類似卡片的設計。在視覺上，Android 會強調陰影，將卡片往上浮。而 iOS 上的卡片，則是扁平處理。Android 的選單 (Menu)，樣式其實有點像 Simple Dialogs，只不過 Dialogs 是出現在畫面正中間，而 Menu 出現的位置和點擊某物件的位置有相對關係。當沒有其他 icon 和 control 時，建議使用 Menu，使用體驗上比較流暢，不像 Dialog 跳出，侵入性較高，操作會有中斷感。Menu 常在三種情境下會出現：第一個是點擊在 Action bar 上或是在列表尾端的 overflow icon；點擊 dropdown button (項目尾端有小三角型)； 點擊列表時(往往是兩行式的列表，上面是標題，下面則是值)。而在 iOS 沒有 Menu的樣式，在手機上點擊和含值的 Cell 做選擇時，往往會進到下一層頁面，展示各個選項，並在選項右側有單選的 Ckeckmark，標註已選的項目。iPad上則是可以使用Popover樣式。iOS 上另一個替代方式則是使用 Picker (含選項的滾輪，用滾動的方式選擇項目)，點擊 Cell ，Picker 會出現在該 Cell 底下，或是直接從頁面底端往下升起。Android 和 iOS 各自都有日期和時間的 Picker可以使用。Android 有日期（可選擇年份和日期）和時間兩種類型。iOS則是有日期（年、月、日）、時間（時、分及可選擇是否要有的上下午）、日期和時間（年、月、日、時、分及可選擇是否要有的上下午）和倒數計時器（時和分）四種類型。分隔線 (Dividers) 主要用於資料的分區，幫助資料閱讀等作用， Android 對於 dividers 有詳細定義出使用方式，而 iOS 雖然沒在Guidelines中載明，但仍有自己的一套邏輯。Android dividers分為全出血分隔線(full-bleed dividers) 和內縮分隔線 (Inset dividers)。全出血主要用於分隔大段落區塊，而在 iOS 上的表現形式，就會是用Grouped Table，中間空出灰色區域作為分隔之用。Android 的內縮分隔線，就是用於分隔相關的內容，當 List 左側有 icon 或圖像時，Divider 會從文字開始延伸， iOS 有 icon 時，亦是如此，但有圖像時，就可能從圖像下方開始延伸。另外，Android 很多時候並不使用 dividers，它會運用足夠的留白空間，去做資料的區隔，而 iOS 只要是列表類，一律都會有 divider。Android 文字框 (Text Fields)，常會在需填寫資料的表格 (forms) 中出現，有單行、多行、寬度滿版 (Full-width) 三種樣式。輸入的格式也分成三種：當點擊 Text Fields 時，會依 Text Fields 可以輸入的內容格式，升起相對應的虛擬鍵盤，所以設計師和工程師在設計時，應該應該定義好輸入類型，再輸入電話號碼的欄位時，其實應該升起數字鍵盤，而非一般打字鍵盤。iOS Text Fields 和 Android 一樣，點擊文字框時，會自動升起相對應的虛擬鍵盤。Text Fields 通常用以填寫小量的資訊，例如姓名、電子信箱等。Android 和 iOS 在 Text Fields 上，都可以放置 icons/圖片作為內容輸入提示之用。另外，當 iOS Text Fields 內已有輸入內容，且是 focus 狀態，Text Fields 右側尾端會出現清空按鈕，點擊之後，會把內容清空。Anroid 在一般文字框上，並無此設計（但在使用 Search bar 時會出現）。另外在點擊 Android Text Fields 後，原先的作為輸入提示之用的 Placeholder 可轉變為 Label，算是比較貼心的設計，讓使用者因為輸入內容之後，還能得知標籤名。Android Guidelines 同時也定義出字數統計 (Character counter) 和錯誤訊息的位置。滑桿元件 (Sliders) 適合用於調整一些例如音量、明度、彩度等，有關大小強度的設定。Sliders 左側為最小值，右側為最大值。Android 的 Sliders 有兩種形式：無段式 (Continuous sliders)和有段式 (Discrete sliders)，調整 Continuous sliders 時，數值會是連續性的變化，而調整 Discrete sliders 數值可能以 10 或 20 的幅度跳動，已經預設好一定的調整幅度。Android Slicers 除了左側可以放 icon 以外，也和 iOS 一樣，雙邊都可以放置 icon，另外，Android 除了有 Sliders 可以滑動調整，還可提供 Text box，讓使用者能輸入更精準的數值，以利調整。Android 的搜尋分成 Persistent Search 和 Expandable Search，可以和 iOS 的 Prominent Search 及 Minimal Search 做個對照。Persistent Search 和 Prominent Search 主要用在當搜尋是 App 內很重要的核心功能，例如：商店類 App，可能常需要透過搜尋找到想要的商品。Android Persistent Search Bar 為卡片樣式，搜尋後的結果亦然。Expandable Search 和 Minimal Search，主要用在 App 內，搜尋功能較為次要的狀況。Android 弱化 Search 功能的方式，是將其變為一顆 Search icon，點擊之後的 Search Bar 和 App Bar 融為一體。而 iOS 的 Minimal Search則採用視覺的方式，將 Search Bar 以半透明的方式呈現，融入 UI 內。另外，弱化 iOS Search 功能的方式還有利用 Search icon。此外，iOS 有時候會把 Search Bar 隱藏在 Navigation Bar 底下，將往下滑動，Search Bar 就會跑出來。Android 習慣在 List 上久按，進入選取模式，並將該項目選取，再採取動作，如刪除等。或是在右上方 Overflow icon 內，選單往往也有選取，可點擊進入選取模式。iOS 在一般模式底下，有時候會支援手勢刪除，將刪除藏在列表下方。使用者也可以點擊 Navigation Bar 上的編輯按鈕，進入編輯模式，進行刪除(及順序位移)。如果有其他動作，如移動、封存等，編輯模式會是多選列表，且出現底部 Toolbar，放置操作按鈕。Android 和 iOS 都可以久按文字後，反白選擇文字，選擇之後會出現操作選單，Android 的操作會出現在 App Bar 上（且 App Bar 會轉變為另一個樣式，代表進入選取模式），而 iOS 則是在選取的文字上方展示操作選單。複製或減下文字後，在 Text Fields 處，可以再次久按，將複製的文字貼上。一般而言，進度條優於 Spinner ，因為能讓使用者掌握目前的進度狀況，讓人願意等待。當一個操作進度如果是可以預期，會使用進度條，如果等待時間在一分鐘以內，可以使用百分比表示進度，如果超過一分鐘，可以用剩餘時間；如果無法預期則使用轉轉轉的Spinner。如果進度可以預期，但等待很短，約三四秒之內，也可以考慮使用 Spinner。進度條除了在內文、Dialog 中出現以外，有時候也會出現在 App Bar/ Navigation Bar 下方，例如瀏覽器類型的 App 就常如此擺放。除了常見的線狀進度條外，有時候也會有環狀的進度條，常會和下載按鈕結合，按下按鈕之後，就會變成環狀進度條，與按鈕相互應。而 Android 進度條除了 Determinate 樣式外，還另有 Indeterminate，表達未知進度。Android 還訂出詳盡 App 狀態的顯示方式，如：緩衝狀態、先未知再已知進度的混合狀態。另外在刷新內容的行為，Android 也學習了 iOS 習以為常的方式，畫面往下拖動，出現正在載入的小動畫。當想要將 App 的內容分享至另一個 App 時， Android 和 iOS 有自己使用的圖示，請勿混用。值得注意的是 iOS 的 Action，不完全是作為分享之用，其他操作如複製、儲存等其他操作，亦會放在點擊之後出現的 Action Sheet 內。Android 和 iOS 的 Status Bar 基本會有時間、電量、Wi-Fi訊號強度、網路訊號強度等資訊。往下滑動，會出現 Notifications 通知訊息中心。Android Navigation Bars 與 iOS Navigation Bars 是截然不同的東西，請勿混淆。 Android Navigation Bars 主要有返回、首頁、最近開啟的 App 三個按鍵，Navigation Bars 可以是虛擬按鈕，在螢幕顯示，或是直接做在硬體上。iOS 僅有 Home 一個實體按鍵返回首頁，快速點擊兩下，會進到最近開啟的 App 頁面。值得注意的是， iOS 不像 Android 有返回鍵，所以在設計 UI 時，畫面上一定要有返回按鈕。Android 習慣使用 Navigation Drawer 作為導航，而最近也開始使用 Tabs & Bottom navigation 做為主導航，降低使用性問題；iOS 則是一直使用底部 Tab Bars 作為導航。Android App Bar 習慣把頁面標題向左置，功能鍵向右置放； iOS 則是標題置中於 Navigation Bar ，左右兩側放置功能鍵。Android 和 iOS 皆有底部工具列，可放置文字或 icon 形式的功能鍵，亦可放置狀態訊息。對於第二或更低層級的導航，Android 會使用 Tabs，並有 Fixed 和 Scrollable Tabs 可供選用，且支援手勢滑動切換；iOS 則是使用Segmented Controls，數量限於 2–5 項。雖然 Android 和 iOS 有個習慣的樣式，但視覺設計師其實還是能依自己想法設計，只要不要讓使用者困惑即可。唯一該注意的是 Android 按鈕文字會使用全大寫。Android 有擁有自己獨有的浮動按鈕，主要放置該頁面的主要功能鍵，且至於畫面右下角，方便點擊；而 iOS 的 CTA 按鈕，則是習慣放在 Tab Bars 的正中間。iOS Action Sheets 行之有年，後來 Android 為了單手操作方便，也向 iOS 看齊，出現 Bottom Sheets 可以放置操作功能。對話框主要用於警告、提供選擇以及動作確認，Android 和 iOS 的主要功能鍵都會放於右側，取消鍵放於左側。按鍵的動作文字應明確，避免使用是、否的文字。Android Full-Screen Dialog 和 iOS Modal View或 Popover 的頁面在手機上是全螢幕，但在平板上則回歸適當大小，浮在頁面上。當完成一個動作之後，作為短暫回饋提示之用。Android 的 List 不一定有分隔線，會習慣用空間去區隔；而 iOS 會有隔線且有下一頁的提示 icon，使用性比 Android 更佳。另外 iOS 有 Plain 和 Grouped Tables 兩種樣式。Android 僅有 Subheader一種樣式作為次標題；iOS 在 Grouped Table 的標題有一種樣式，在 Plain Tables 有另一種樣式。Android 和 iOS 的單選、多選、移動順序等，有各自對應的控制元件可以使用，請勿混用，並免困惑。Android 有 Menu 樣式，但 iOS 則是使用 Picker，或是直接到下一頁做選擇。基本上 Android 和 iOS 大同小異。為 Android Material Design的重點，但 iOS 亦有類似設計。有各自的元件可以套用。Android 有分隔線，而 iOS 則是使用 Grouped Table 做出區隔。有各自的元件可以套用，兩者使用上類似。要注意 Text Fields 的格式，彈出適當的鍵盤有各自的元件可以套用，兩者使用上類似。Android 的搜尋分成 Persistent Search 和 Expandable Search，可以和 iOS 的 Prominent Search 及 Minimal Search 做個對照。另外 iOS 有時候把 Search Bar 藏在 Navigation Bar 下方，需向下滑動頁面以喚出。Android 習慣先選取項目，然後再做刪除或其他操作。 iOS 支援滑動刪除，或是進入編輯模式後，一個一個點擊刪除。 當有其他操作時， iOS 和 Android 一樣，也是先選擇項目，再進行動作。選取文字時，Android App Bar 會有變化，出現對應的動作鍵； iOS 則是直接載選取文字的上方出現選單。當一個操作進度如果是可以預期，會使用進度條；如果無法預期則使用轉轉轉的Spinner。Android 和 iOS 有各自代表分享的 icon，請勿混用。Android 和 iOS 的 Status Bar 基本會有時間、電量、Wi-Fi訊號強度、網路訊號強度等資訊。Android Navigation Bars 主要有返回、首頁、最近開啟的 App 三個按鍵。iOS 僅有 Home 一個實體按鍵返回首頁，快速點擊兩下，會進到最近開啟的 App 頁面； iOS 無返回鍵，因此 UI 畫面需有返回按鈕。從近幾年的觀察來看，Android 的一些操作行為和控制鍵，越來越像 iOS，兩者的差異漸漸縮小，但 Android 仍還是有保留部分自己獨特的操作習慣。放眼未來，Android 和 iOS 有更趨一致的可能，這對使用者或是開發者，應是樂見。雖然有些 UI 元件在 Android 或 iOS Guidelines 中沒定義，但不代表完全不能使用，有些情境，因為 default UI 元件的侷限性，還是需要借用別的平台的經驗，客製化自己的元件來克服問題。只是在使用任何該平台不常見的元件和行為之前，該考量的是，到底會不會讓使用著產生困惑。Android 和 iOS 的差異對於使用者來說，是否會有操作影響，才是重點所在。本文介紹的這些 Patterns ，並不是每個 App 都可以直接套用，仍須各種情境的需求，有所調整。希望大家對於兩個平台的元件與操作有更深的認識。如果有錯誤或有疑義的地方，也歡迎討論與指正，十分感謝！這篇文章，對於為什麼 Material Design Guidelines / iOS Human Interface Design Guidelines 會這樣訂定的原因，著墨較少，此篇比較像是務實應用，未來針對這些設計規範背後的脈絡原因，會在其他文章做深入探討。From a quick cheer to a standing ovation, clap to show how much you enjoyed this story.Interaction designer with UX mindset. Behance: be.net/designlcc. Email: designlcc@gmail.comAAPD專注於分享數位產品設計的相關資訊，並且致力在平台上創造更多的交流與互動，我們關注UI設計、UX設計、設計師的個人成長、設計趨勢與產業動態等，希望透過這些知識的傳遞，能夠降低每位設計師成長的過程中所遇到的阻礙。歡迎來信投稿：aapdgo@gmail.com
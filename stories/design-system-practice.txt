我一直對建構 Design system、Design guideline 很有興趣，因為在建構的過程中，可以深度了解與思考各個元件的操作、適合使用的場景、享受制定屬於自己產品視覺風格的過程。以往的經驗都是為單一專案整理出 Design guideline，每個專案都擁有自己的風格。但這樣的做法在團隊運作一段時間後，就面臨到團隊人數有限，專案無限的狀況。在資源有限的情況下如何達到不重工並加快開發效率，讓相同元件的設計與程式碼可以在不同專案重複利用，變成我們下一步目標。於是，我們開始思考如何建構自己的 Design system，不只是設計，也將程式模組化。但在團隊資源有限與同時有專案進度的情況下，並無法做到像 Airbnb、Google Material Design、Ant Design、Atlassian 這麼完整。我們能解決的是先抽出共用元件，將其模組化，變成 Common UI Library，讓共用元件可以跨專案的使用。當提出建置新元件需求後，我們會盤點他的實用性、必要性：這部分會直接影響要不要實作以及實作的先後順序。接著設計師可以為了這個元件提案，提案包含：提出後，團隊的每個人都可以表達自己的意見，採多數投票決。通常工程師對於「功能涵蓋範圍與互動操作」會跟設計師有比較多的討論，原因是各自還有專案進度要做，所以會討論現階段這個元件要做到多完美、多通用。實作後，工程師會 Pull request 給團隊做驗收，驗收項目包含：驗收完成後才能 Push 到 Common UI Library，這就是我們建置的流程。建立了內部開發使用的 Common UI Library: MTKUI 後，除了加快前端的開發速度外，最重要的是可以讓設計師將重心放在流程規劃的部分。但這樣的流程要維持不太容易。除了剛剛提到的各自還有專案進度要做，在這個流程裡我們並沒有指定是哪位設計師與工程師要負責什麼元件或模組，靠的是自發性與熱情。當專案一忙起來，建置的速度就會延宕 ; 再來是前端技術日新月異，所使用的套件如果升級，免不了要再花時間調整。其他的缺點還有設計風格會被侷限、建置後要花時間替換原本的元件等等。所以擁有自己的 Design system 是條不歸路，組織要有共識並且願意持續投入人力才會走得長久。要有 Design system 前，還是要先知道自己的需求以及想解決什麼樣的問題，才討論需不需要建置自己的 Design system。時間拉回到今年初，在知道了 MCS Lite 有開源計畫後，我便開始收集與 Design system 相關的資料（文末有連結），例如什麼是一套好的 Design system、需要具備什麼思維來設計 Design system 等等，用來檢視目前設計得 MTKUI 在開源前還有哪些地方可以調整或可以做得更好。特別提一下，我並不是從零開始，而是從現有的 MTKUI 抽出 Lite 所用的元件，做開源的準備，我們就稱它為『MCS Lite UI』吧。以下是我在開源前做的一些準備：1. 命名的規劃與整理從 Common UI Library 抽出 Lite 所用的元件並做開源準備的第一步就是整理命名。除了了解各元件正確的名稱外，如何讓整體命名邏輯一致，使用起來一目了然？這時腦中會突然湧現很多想法，例如需不需要加上底線呢？使用分隔線呢？還是用空格？要用大寫還是小寫呢？決定命名邏輯的同時，也要想一下元件的最小單位是什麼？要怎麼劃分？例如元件切割得越小、Symbol 化越多，可以調整的彈性越大，但整份 Guideline 也會變得複雜，特別是當使用者要更改狀態時。以下是幾個範例的觀察：比較之下，我發現自己的實作習慣比較類似 Google Material Design，所以命名邏輯會比較參考它。簡化一個例子：組成一個基本類型的 Input 包含 Label, Input box, Input box 的狀態以及 Input box 裡的提示字和輸入文字。所以分類就會是：input/defaultinput/_element/input boxinput/_element/labelinput/_style/state/normalinput/_style/state/focusinput/_style/state/errorinput/_style/state/disable延續剛剛提到的例子，input/default 由 input/_element/input box 與 input/_element/label 組成，組成 Symbol 後你可以在右邊的 Overrides 看到各個 Symbol layer 名稱，名稱太長就會以點點點顯示，識別性低。所以接著要調整 Symbol layer 命名，也就是左邊橘色框框的部分。調整命名後是不是更清楚呢？由於連結性已經建立，即便調整左邊 Symbol layer 的命名，任何修改還是可以同步，也可以讓右邊 Overrides 的顯示名稱更精簡，讓使用者一看就知道這個是控制哪個元件。所以其實在命名這階段，可以依照團隊需求或是個人習慣來制定，沒有一定要遵守的規範。不過還是有些小提醒或曾經踩雷的經驗可以跟大家分享：我們還可以利用 Sketch 的 Resizing 或 Sketch plugin 來做到更彈性的元件。你可以下載 MCS-lite_design_guidelines 試試。目前我們是用 React storybook 這個套件來呈現 MCS Lite UI，它可以邊開發邊看到即時的 UI 呈現。如果有時間和人力的話，設計師也可以設計這個頁面。如果對 UI 組件化的工程端實作部分有興趣的話，可以看看我們工程師的文章：Build A Web App in MediaTek，不管是程式還是設計都希望跟大家有更多的交流：)雖然我們解決了跨專案共用元件的使用問題，但由於時程、人力上的因素，在前期我們並沒有辦法針對 Design system 的理念、視覺特色做完整的發想與提案，只能依據現有的風格作延伸，這是我覺得比較可惜的地方。不過我很享受這個過程，看了許多分享的文章不如自己捲起衣袖實際操作一次，確實從中得到許多寶貴的經驗。 至於這份設計檔在 Symbol 與 Resizing 化後，是否可以順利運用在不同專案上並加快設計的速度，我想，又是下一次可以跟大家分享的題目了:D最後列出我覺得有幫助的文章，提供大家參考：From a quick cheer to a standing ovation, clap to show how much you enjoyed this story.UI/UX Designer at MTK.AAPD專注於分享數位產品設計的相關資訊，並且致力在平台上創造更多的交流與互動，我們關注UI設計、UX設計、設計師的個人成長、設計趨勢與產業動態等，希望透過這些知識的傳遞，能夠降低每位設計師成長的過程中所遇到的阻礙。歡迎來信投稿：aapdgo@gmail.com